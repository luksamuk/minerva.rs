#+title: Minerva.rs

#+html: <a href="https://insomnia.rest/run/?label=Minerva&uri=https%3A%2F%2Fraw.githubusercontent.com%2Fluksamuk%2Fminerva.rs%2Fmaster%2Ftest%2Finsomnia.json" target="_blank"><img src="https://insomnia.rest/images/run.svg" alt="Run in Insomnia"></a>

* Descrição

Minerva  é um  projeto  de estudo  de um  sistema  gerencial feito  em
Rust. O sistema  é uma prova de conceito, principalmente  para teste e
implementação de  uma API  REST de backend  para um  sistema gerencial
qualquer, especialmente  quando este  envolver valores  numéricos para
pesos, estoque e preços.

Este projeto  utiliza as bibliotecas  [[https://rocket.rs][Rocket]] e [[https://diesel.rs][Diesel]] para  criação de
uma API REST e conexão com um banco de dados PostgreSQL.

Este  projeto também  utiliza  nomenclaturas em  Português por  razões
parcialmente didáticas  e parcialmente arbitrárias, não  sendo reflexo
direto do gosto do  autor. Caso você seja alérgico ao  uso de nomes de
estruturas e variáveis em Português, esteja desde já avisado(a).

* Dependências

- Rust  (versão  2018,  canal stable,  preferencialmente  com  ~rustc~
  1.54.0);
- Cargo (ferramenta do Rust para compilação);
- PostgreSQL 11 (utilizável via Docker);
- Redis 6 (utilizável via Docker).

As   dependências  de   bibliotecas  propriamente   ditas  podem   ser
verificadas no arquivo ~Cargo.toml~. Essas dependências serão baixadas
durante a compilação do projeto.

* Licenciamento

Este projeto é redistribuido sob a licença GNU General Public License,
versão 3. Para  maiores informações, veja o arquivo LICENSE  ou veja o
cabeçalho dos arquivos de código.

* Configuração do banco de dados

O banco de dados para esse projeto pode ser configurado manualmente em
algum  serviço  remoto  ou  local.  Para  testes  no  desenvolvimento,
recomenda-se o uso de Docker, sobretudo em ambientes Linux.

Os  passos  a seguir  designam  comandos  de  console para  criação  e
gerenciamento do contêiner para o banco de dados.

** Criação do contêiner

O  comando  a  seguir  cria  o contêiner  do  banco  de  dados  usando
PostgreSQL 11, usando Docker.

#+begin_src bash
docker run --name minervadb \
       -e POSTGRES_USER=SYSDBA \
       -e POSTGRES_PASSWORD=masterkey \
       -p 5432:5432 \
       -d postgres:11
#+end_src

O comando definirá o banco de dados da forma a seguir:

- Nome do banco: ~minervabd~
- Usuário: ~SYSDBA~
- Senha: ~masterkey~
- Porta: ~5432~ (padrão)
- Link do BD: ~postgres://SYSDBA:masterkey@localhost/minervadb~

** Recuperando IP do contêiner (caso necessário)

Caso você  precise de um  IP concreto  para o contêiner  (por exemplo,
para  executar  scripts  em  SQL   via  Org  Mode),  poderá  consultar
diretamente o IP do contêiner usando o comando abaixo.

#+begin_src bash
docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' minervadb
#+end_src

** Gerenciamento do contêiner

Os comandos abaixo  servem para iniciar, matar e verificar  os logs do
contêiner de banco de dados.

#+begin_src bash
docker start minervadb
docker stop minervadb
docker logs minervadb
#+end_src

* Configuração do Redis

O comando  a seguir  cria um  contêiner de uma  instância do  Redis 6,
usando Docker.

#+begin_src bash
docker run --name minerva-redis \
       -p 6379:6379 \
       -d redis:6
#+end_src

** Gerenciamento do contêiner

Assim como  no caso  do contêiner  do banco de  dados, convém  usar os
comandos do Docker para gerenciamento.

#+begin_src bash
docker start minerva-redis # Iniciar
docker stop minerva-redis  # Matar
docker logs minerva-redis  # Logs
#+end_src

** Conectando-se via CLI

Caso você tenha o ~redis~ instalado em sua máquina, use o comando...

#+begin_src bash
redis
#+end_src

...para acessar o Redis no contêiner local.

* Criando migrations

Os  comandos  a  seguir  mostram  como  criar  novas  migrations  para
modificações no banco de dados.

** Preparação inicial do banco de dados

Execute o comando abaixo  para fazer com que o Diesel  crie o banco de
dados  de  acordo com  a  variável  de ambiente  ~DATABASE_URL~  (essa
variável também  pode ser definida  com um  arquivo ~.env~, como  já é
feito nesse repositório, para testes, por padrão).

Veja  também  o  arquivo  ~diesel.toml~  e  assegure  que  ele  aponta
adequadamente para o  arquivo de schemas (este arquivo  também já está
definido neste repositório).

#+begin_src bash
diesel setup
#+end_src

Este comando  também executará  todas as  migrations já  criadas nesse
repositório.

Para maiores  informações, veja ~diesel  --help~ ou a  documentação do
~diesel~.

** Criando nova migration

Caso seja  necessário criar  uma nova migration,  utilize o  comando a
seguir. A  migration será criada  e você deverá editar  os respectivos
arquivos ~up.sql~ e ~down.sql~.

#+begin_src bash
diesel migration generate nome_da_migration
#+end_src

** Executa migrations

Após editar os arquivos ~up.sql~ e ~down.sql~, execute a migration com
o comando a seguir.

#+begin_src bash
diesel migration run
#+end_src

Para verificar se ~down.sql~  está funcionando adequadamente, refaça a
última migration com o comando:

#+begin_src bash
diesel migration redo
#+end_src

* Lista de rotas

Abaixo, uma lista das rotas criadas até então.

| Requisição | Rota                      | Descrição                           |
|------------+---------------------------+-------------------------------------|
| GET        | /                         | Lista de rotas                      |
| POST       | /login                    | Login do usuário                    |
|------------+---------------------------+-------------------------------------|
| GET        | /produtos                 | Lista de produtos                   |
| POST       | /produtos                 | Cadastra um produto                 |
| GET        | /produtos/<id>            | Mostra um produto                   |
| DELETE     | /produtos/<id>            | Remove um produto                   |
| DELETE     | /produtos/all             | Remove todos os produtos            |
|------------+---------------------------+-------------------------------------|
| GET        | /estoque                  | Lista de estoques                   |
| POST       | /estoque                  | Realiza início de estoque           |
| GET        | /estoque/<id>             | Mostra um estoque                   |
| GET        | /estoque/mov              | Movimentos de estoque               |
| POST       | /estoque/mov              | Faz movimentação de estoque         |
| GET        | /estoque/mov/txt          | Movimentos de estoque (texto plano) |
| GET        | /estoque/mov/entradas     | Movimentos de entrada               |
| GET        | /estoque/mov/saidas       | Movimentos de saída                 |
| GET        | /estoque/mov/entradas/txt | Movimentos de entrada (texto plano) |
| GET        | /estoque/mov/saidas/txt   | Movimentos de saida (texto plano)   |
|------------+---------------------------+-------------------------------------|
| GET        | /clientes                 | Lista de clientes                   |
| POST       | /clientes                 | Cadastra um cliente                 |
| GET        | /clientes/<id>            | Mostra um cliente                   |
| DELETE     | /clientes/<id>            | Deleta um cliente                   |
| DELETE     | /clientes/all             | Deleta todos os clientes            |
|------------+---------------------------+-------------------------------------|
| GET        | /usuarios                 | Lista de usuários                   |
| POST       | /usuarios                 | Cadastra um usuário                 |
| GET        | /usuarios/<id>            | Mostra um usuário                   |
| GET        | /usuarios/<login>         | Mostra um usuário                   |
| DELETE     | /usuarios/<id>            | Deleta um usuário                   |
| DELETE     | /usuarios/<login>         | Deleta um usuário                   |
|------------+---------------------------+-------------------------------------|
| GET        | /log                      | Tabela de log                       |
| GET        | /log/txt                  | Tabela de log (texto plano)         |

** Estrutura de cadastro de usuário

Quanto o  servidor se  inicia, verifica  se há  pelo menos  um usuário
cadastrado no sistema.  Se não houver, o servidor  cadastra um usuário
com login ~"admin"~ e senha ~"admin"~, automaticamente.

A requisição para  cadastro de usuário exige um corpo  em JSON com uma
estrutura similar à seguinte:

#+begin_src json
{
    "login": "fulanodetal",
    "nome": "Fulano de Tal",
    "email": "fulanodetal@exemplo.com",
    "senha": "senha_teste_2021"
}
#+end_src

- ~login~: Login do usuário. Deve ser único por usuário.
- ~nome~: Nome do usuário.
- ~email~: Email do usuário. Opcional.
- ~senha~: Senha em texto plano.  Será armazenada como hash salgado no
  banco de dados. Certifique-se de  só trafegar essa informação para o
  servidor por meio de conexão encriptada.

** Estrutura de login de usuário

A requisição  para login  de usuário  exige um corpo  em JSON  com uma
estrutura similar à seguinte:

#+begin_src json
{
    "login": "fulanodetal",
    "senha": "senha_teste_2021"
}
#+end_src

- ~login~: Login do usuário.
- ~senha~: Senha em texto plano.

Uma requisição  correta de  login devolverá uma  resposta em  JSON com
estrutura similar à seguinte:

#+begin_src json
{
    "id": 1,
    "login": "fulanodetal",
    "token": "<token JWT>"
}
#+end_src

Os atributos ~id~ e ~login~ são próprios do usuário logado. O atributo
~token~ é um JSON Web Token, que *deverá ser informado no cabeçalho da
maioria das requisições* para que elas possam ser executadas.

No Minerva, os  tokens JWT são verificados em três  sentidos: pela sua
validade de  expiração inerente,  pela sua  associação com  um usuário
específico e pela sua validade de armazenamento do lado do servidor.

A associação a  um usuário e sua validade de  armazenamento do lado do
servidor são gerenciados através do Redis, que guarda o token JWT como
chave e  o nome do usuário  como valor associado. Assim,  mesmo que um
token JWT seja adulterado, caso o  mesmo não conste como registrado no
Redis para  o mesmo usuário ao  qual se refere, a  requisição não será
autorizada.

Todos os tokens JWT emitidos têm um tempo de vida de sete dias.

** Estrutura de cadastro de cliente

A requisição para  cadastro de cliente exige um corpo  em JSON com uma
estrutura similar à seguinte:

#+begin_src json
{
    "nome": "Nome do Cliente",
    "pj": false,
    "docto": "000.000.000-00",
    "enderecos": [
        {
            "logradouro": "Logradouro",
            "numero": "0",
            "bairro": "Bairro",
            "uf": "UF",
            "cidade": "Cidade"
        },
        {
            "logradouro": "Logradouro",
            "numero": "0",
            "complemento": "Casa",
            "bairro": "Bairro",
            "uf": "UF",
            "cidade": "Cidade"
        }
    ]
}
#+end_src

- ~nome~: Nome do cliente.
- ~pj~: Indica se o cliente é pessoa física ou jurídica.
- ~docto~: Documento do cliente. Pode ser CPF ou CNPJ, de acordo com o
  parâmetro ~pj~.
- ~enderecos~: Lista  de endereços do  cliente. Todo cliente  pode ter
  uma quantidade  arbitrária de  endereços. Pode  ser também  um vetor
  vazio, mas deverá ser mostrado na estrutura.

*** Campos dos endereços

- ~logradouro~: Logradouro.
- ~numero~: Número  do endereço.  Informado em string.   Ex: ~"1234"~,
  ~"456 A"~, etc.
- ~complemento~:  Pode  ser  omitido  ou informado  como  ~null~.  Ex:
  ~Casa~, ~Prédio~, etc.
- ~bairro~: Bairro.
- ~uf~: Unidade federativa.
- ~cidade~: Cidade.

** Estrutura de cadastro de produto

A requisição para  cadastro de produto exige um corpo  em JSON com uma
estrutura similar à seguinte:

#+begin_src json
{
  "descricao": "Descrição do produto",
  "unidsaida": "UN"
}
#+end_src

- ~descricao~: Descrição do produto.
- ~unidsaida~:  Unidade  de  saída  do produto.   Será  armazenada  em
  uppercase. Ex: ~"UN"~, ~"KG"~, etc.

** Estrutura de início de estoque

A  requisição de  início de  estoque exige  um corpo  em JSON  com uma
estrutura similar à seguinte:

#+begin_src json
{
    "produto_id": 31,
    "quantidade": 500.0,
    "precounitario": 1.50
}
#+end_src

- ~quantidade~: Quantidade inicial em  estoque.  Admite até três casas
  decimais. Valor máximo: ~999999999.999~.
- ~precounitario~:  Preço de  venda unitário  do produto.   Admite até
  quatro casas decimais. Valor máximo: ~999999999.9999~.

*ATENÇÃO:*   As  informações   ~quantidade~   e  ~precounitario~   são
armazenadas no  banco de  dados como  /ponto fixo/,  e não  como ponto
flutuante. Por esse motivo, é importante  assegurar o limite de uso de
dígitos  para a  parte  integral  e decimal  destes  valores. Caso  os
dígitos excedam o padrão, o número poderá ser truncado.

*ATENÇÃO*: A quantidade e o preço unitário não podem ser negativos. De
forma similar, o preço unitário deverá ser maior que zero.

** Estrutura de movimentação de estoque

A requisição de movimentação de estoque exige um corpo em JSON com uma
estrutura similar à seguinte:

#+begin_src json
{
    "produto_id": 31,
    "docto": "00000000",
    "quantidade": 1500.0,
    "preco_frete": 0.00,
    "preco_unitario": 1.50
}
#+end_src

- ~produto_id~: ID do produto a ser movimentado.
- ~docto~:  Identificação   do  documento  que  está   movimentando  o
  estoque.
- ~quantidade~: Quantidade  a ser movimentada no  estoque.  Admite até
  três casas decimais. Valor máximo: ~999999999.999~. Para uma redução
  no estoque, informar valores negativos.
- ~preco_frete~: Opcional.  Valor do frete  do produto. Caso  não seja
  informado,  será  armazenado  como  zero. Admite  até  quatro  casas
  decimais. Valor máximo: ~999999999.9999~.
- ~preco_unitario~: Preço  de venda  unitário do produto.   Admite até
  quatro casas decimais. Valor máximo: ~999999999.9999~.

*ATENÇÃO:*   As  informações   ~quantidade~   e  ~precounitario~   são
armazenadas no  banco de  dados como  /ponto fixo/,  e não  como ponto
flutuante. Por esse motivo, é importante  assegurar o limite de uso de
dígitos  para a  parte  integral  e decimal  destes  valores. Caso  os
dígitos excedam o padrão, o número poderá ser truncado.

*ATENÇÃO:*  A  movimentação  de  estoque  não  pode  resultar  em  uma
quantidade negativa de estoque.

* Executando o projeto

Após  o banco  de  dados estar  apropriadamente  definido, é  possível
executar o projeto com o comando:

#+begin_src bash
cargo run
#+end_src

Para mais  informações, veja a  documentação da ferramenta  ~cargo~ da
linguagem Rust.

** Utilitários de linha de comando

Existem  alguns  utilitários  de  linha  de  comando  configurados  no
projeto, que não fazem parte  diretamente do binário do servidor REST,
mas existem  para fins de  debug. Estes utilitários existem  para, por
exemplo, testar  o cadastro  de uma entidade  antes de  criarmos rotas
para a mesma.

Os utilitários  podem ser  executados por um  comando como  ~cargo run
--bin nome_do_utilitario~.

- ~cria_cliente~: Cadastro de clientes interativo, via console.
- ~cria_produto~: Cadastro de produtos interativo, via console.

